题目：
输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。

思路：
如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，那么原来处在整数最右边的1就会变为0，原来在1后面的所有的0都会变成1(如果最右边的1后面还有0的话)。其余所有位将不会受到影响。

举个例子：一个二进制数1100，从右边数起第三位是处于最右边的一个1。减去1后，第三位变成0，它后面的两位0变成了1，而前面的1保持不变，因此得到的结果是1011.我们发现减1的结果是把最右边的一个1开始的所有位都取反了。这个时候如果我们再把原来的整数和减去1之后的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。如1100&1011=1000.

也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变成0.那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。


扩展：位运算
与（&），参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0
或（|），只要对应的二个二进位有一个为1时，结果位就为1。
非（~）：对数据的每个二进制位取反,即把1变为0,把0变为1。
异或（^）：当两对应的二进位相异时，结果为1
左移（<<）: 运算数的各二进位全部左移若干位，由"<<"右边的数指定移动的位数，高位丢弃，低位补0。
右移（>>）：把">>"左边的运算数的各二进位全部右移若干位，">>"右边的数指定移动的位数。高位补0或1。正数补0，负数补1。

2 进制是以 0b 开头的: 例如: 0b11 则表示十进制的 3

8 进制是以 0o 开头的: 例如: 0o11 则表示十进制的 9

16 进制是以 0x 开头的: 例如: 0x11 则表示十进制的 17


举一反三：
用一条语句判断一个整数是不是2的整数次方。
答：
n & (n-1) == 0为正,代表n是2的整数次方。
因为2的整数次方的二进制数有且只有一个1。

输入两个整数m和n,计算需要更改m的2进制表示中的多少位才能得到n。
答：
第一步：将这个两个数异或
第二步：统计这个值的1的个数。
