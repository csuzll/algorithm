比如,某个服务器的配置信息存在在一个文件中,客户端通过AppConfig类来读取配置文件的信息.如果程序的运行的过程中,很多地方都会用到配置文件信息,则就需要创建很多的AppConfig实例,这样就导致内存中有很多AppConfig对象的实例,造成资源的浪费.其实这个时候AppConfig我们希望它只有一份,就可以使用单例模式.

实现单例的方法：

1、借助__new__()方法创建单例:
当我们实例化一个对象时，是先执行了类的__new__方法（我们没写时，默认调用object.__new__），实例化对象；
然后再执行类的__init__方法，对这个对象进行初始化，所以我们可以基于这个，实现单例模式。
主要在__new__()中是定义一个类实例变量，判断它是否存在，不存在则创建。


2、使用元类
在python3中，我们自己定义的类，比如说Person，Dog类，它们默认的元类是type。换句话说，Person类，Dog类也是对象，它们是type类的实例对象。因为：一切皆是对象。（元类的实例是类。）

可以定义一个单例类，这个类继承自type, 所以这个类是元类。在这个元类中的__call__()方法创建它的实例（类）的实例。

定义个Foo类，其元类为单例类（metaclass=单例类），那么这个Foo类是由单例类这个元类创建的，那么就是说Foo类是单例类的实例对象；

既然Foo是实例对象，那么如果这么写“Foo()”，就表示类似于函数的调用方式一样，说明实例对象也可以按照函数的方式去调用；

去执行“Foo()”这个代码时候，就自动的调用call方法，而call方法的逻辑已经重写了逻辑，实现了一个类身上只能有“_instance”这一个属性，从而实现了单例。